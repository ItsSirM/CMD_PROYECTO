package com.mycompany.cmd;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;

/**
 *
 * @author MARTI
 */
public class CMD_SWING extends javax.swing.JFrame {

    /**
     * Creates new form CMD_SWING
     */
    public CMD_SWING() {
        initComponents();
    }    
    
    Comandos cmds = new Comandos();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        INGRESOB = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        AREATEXT = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        INGRESOB.setBackground(new java.awt.Color(0, 0, 0));
        INGRESOB.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        INGRESOB.setForeground(new java.awt.Color(0, 204, 51));
        INGRESOB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INGRESOBActionPerformed(evt);
            }
        });

        AREATEXT.setEditable(false);
        AREATEXT.setBackground(new java.awt.Color(15, 15, 15));
        AREATEXT.setColumns(20);
        AREATEXT.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        AREATEXT.setForeground(new java.awt.Color(0, 204, 51));
        AREATEXT.setRows(5);
        AREATEXT.setText("BIENVENIDO AL COMANDLINE"+"\n"+cmds.elFile.getPath());
        AREATEXT.setToolTipText("");
        jScrollPane2.setViewportView(AREATEXT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(INGRESOB)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 719, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(INGRESOB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void INGRESOBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INGRESOBActionPerformed
        String partes[] = INGRESOB.getText().split(" ");
        String cmd = partes[0];
        
        switch(cmd){
            case "mkdir" -> {
                if(cmds.mkdir(partes[1])==true){
                    String text = AREATEXT.getText();
                    text += "\nDireccion "+partes[1]+" creada Existosamente";
                    AREATEXT.setText(text+"\n"+cmds.elFile.getAbsolutePath());
                }
                else{
                    String text = AREATEXT.getText();
                    AREATEXT.setText(text+"\nError al crear directorio");
                }
                    
            }
            case "mfile" -> {
                try {
                    if(cmds.mfile(partes[1])==true){
                        String text = AREATEXT.getText();
                        text += "\nArchivo "+partes[1]+" creado Existosamente";
                        AREATEXT.setText(text+"\n"+cmds.elFile.getAbsolutePath());
                    }
                    else{
                        String text = AREATEXT.getText();
                        AREATEXT.setText(text+"\nError al crear Archivo");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(CMD_SWING.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case "rm" -> cmds.rm(partes[1]);
            case "cd" -> {
                if(cmds.cd(partes[1])!=null){
                    cmds.elFile = cmds.cd(partes[1]);
                    String text = AREATEXT.getText();
                    AREATEXT.setText(text+"\n"+cmds.elFile.getAbsolutePath());
                }
            }
            case "..." -> cmds.regreso();
            case "dir" -> {
                String text = AREATEXT.getText();
                AREATEXT.setText(text+cmds.dir());
            }
            case "date" -> {
                String text = AREATEXT.getText();
                AREATEXT.setText(text+"\n"+cmds.date());
            }
            case "time" -> {
                String text = AREATEXT.getText();
                AREATEXT.setText(text+"\n"+cmds.time());
            }
            case "escribir" -> cmds.escribir(cmds.elFile.getAbsolutePath(), partes[1]);
            case "leer" -> cmds.leer(cmds.elFile.getAbsolutePath());
            default -> {
                String text = AREATEXT.getText();
                text += "\nINGRESE UN COMANDO DE VERDAD";
                AREATEXT.setText(text);
            }
        }   
    }//GEN-LAST:event_INGRESOBActionPerformed

    
     private void updateTextArea(String message) {
         AREATEXT.append(message + "\n");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CMD_SWING.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CMD_SWING.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CMD_SWING.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CMD_SWING.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CMD_SWING().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AREATEXT;
    private javax.swing.JTextField INGRESOB;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
